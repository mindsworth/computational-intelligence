{"version":3,"sources":["utils/index.js","components/Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["split","expression","operator","char","result","braces","currentChunk","i","length","curCh","isNaN","indexOf","push","parseDivisionSeparatedExpression","numbers","map","noStr","expr","substr","parsePlusSeparatedExpression","initialValue","slice","reduce","acc","no","Math","pow","parsePowerSeparatedExpression","parseMinusSeparatedExpression","parseMultiplicationSeparatedExpression","Canvas","isRendering","plotGraph","rest","canvasRef","useRef","useEffect","Graph","config","this","canvas","current","minX","minY","maxX","maxY","unitsPerTick","axisColor","cellColor","gCellColor","font","tickSize","context","getContext","rangeX","rangeY","unitX","width","unitY","height","centerY","round","abs","centerX","iteration","scaleX","scaleY","drawXAxis","drawYAxis","drawGrid","prototype","save","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","xPos","unit","xPosIncrement","textAlign","textBaseline","fillText","restore","color","gBlk","xGrid","yGrid","cellSize","h","w","yPos","yPosIncrement","drawEquation","equation","thickness","clearRect","transformContext","x","lineJoin","translate","scale","myGraph","canvasId","ref","App","useState","setExpression","parseExpr","setParseExpr","setMyGraph","isLoading","setIsLoading","chooseComputation","setChooseComputation","nativeParsing","parseModule","variable","newExpr","intChar","Number","parseInt","isNotOperator","replace","transformExpression","className","htmlFor","type","name","value","id","onChange","e","target","placeholder","onClick","f","parse","simplify","evaluate","error","console","log","wolfram","tex","String","raw","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.278622dc.chunk.js","sourcesContent":["// Transform Expression\n\nexport function transformExpression(expr, variable) {\n  //   console.log(\"expr :===>>>>\", expr);\n  let operators = \"()/*+-^\";\n  let newExpr = \"\";\n\n  for (let i = 0; i < expr.length; i++) {\n    let intChar = Number.parseInt(expr[i]);\n    const isNotOperator = (char) => operators.indexOf(char) === -1;\n\n    if (isNaN(intChar) && isNotOperator(expr[i])) {\n      if (isNotOperator(expr[i - 1])) {\n        newExpr += \"*\" + expr[i];\n      } else {\n        newExpr += expr[i];\n      }\n    } else {\n      newExpr += expr[i];\n    }\n  }\n\n  const str = newExpr.replace(/x/g, variable);\n  //   console.log(\"newExpr ===>>>>> TRANSFORM\", str);\n\n  return str;\n}\n\n// split expression by operator considering parentheses\nconst split = (expression, operator) => {\n  // console.log(\"SPLIT\");\n  const operators = \"()/*+-^\";\n  const isNotOperator = (char) => operators.indexOf(char) === -1;\n\n  const result = [];\n  let braces = 0;\n  let currentChunk = \"\";\n  for (let i = 0; i < expression.length; ++i) {\n    const curCh = expression[i];\n    // console.log(\"here ==>>>\", curCh, currentChunk);\n    if (curCh === \"(\") {\n      braces++;\n      if (!isNaN(expression[i - 1])) {\n        currentChunk += \"*\";\n      }\n    } else if (curCh === \")\") {\n      braces--;\n    }\n\n    if (braces === 0 && operator === curCh) {\n      if (\n        operator === \"-\" &&\n        expression[i - 1].length !== 0 &&\n        isNotOperator(expression[i - 1])\n      ) {\n        result.push(currentChunk);\n        currentChunk = \"\";\n      } else if (operator !== \"-\") {\n        result.push(currentChunk);\n        currentChunk = \"\";\n      } else {\n        currentChunk += curCh;\n      }\n    } else currentChunk += curCh;\n  }\n\n  if (currentChunk !== \"\") {\n    result.push(currentChunk);\n  }\n\n  if (result[0] && result[0].length === 0 && operator === \"-\") result[0] = \"0\";\n\n  //   console.log(\"result\", result, expression);\n  return result;\n};\n\n// this will only take strings containing ^ operator [ no + ]\nconst parsePowerSeparatedExpression = (expression) => {\n  //   console.log(\"POWER\");\n  let isNag = false;\n  const numbersString = split(expression, \"^\");\n  const numbers = numbersString.map((noStr) => {\n    if (noStr[0] === \"(\") {\n      const expr = noStr.substr(1, noStr.length - 2);\n\n      //   console.log(\"LOG+noStr\", noStr, expr, noStr.length - 2, noStr.length);\n      // recursive call to the main function\n      return parsePlusSeparatedExpression(expr);\n    }\n    // console.log(\"noStr ====>>>>\", noStr);\n    return +noStr;\n  });\n\n  // const numbers = numbersString.map(noStr => noStr);\n\n  //   let initialValue;\n\n  //   if (Math.sign(numbers[0]) === -1) {\n  //     isNag = true;\n  //     initialValue = -numbers[0];\n  //   } else {\n  //     initialValue = numbers[0];\n  //   }\n  const initialValue = numbers[0];\n\n  let result = numbers\n    .slice(1)\n    .reduce((acc, no) => Math.pow(acc, no), initialValue);\n\n  if (isNag) {\n    result = -1 * result;\n  }\n\n  //   console.log(\"POWER result ====>>>>\", result, numbers);\n  return result;\n};\n\n// both ^ /\nconst parseDivisionSeparatedExpression = (expression) => {\n  //   console.log(\"DIVISION\");\n  const numbersString = split(expression, \"/\");\n\n  const numbers = numbersString.map((noStr) =>\n    parsePowerSeparatedExpression(noStr)\n  );\n\n  const initialValue = numbers[0];\n  const result = numbers.slice(1).reduce((acc, no) => acc / no, initialValue);\n  //   console.log(\"DIVISION result ====>>>>\", result, numbers);\n  return result;\n};\n\n// ^ / *\nconst parseMultiplicationSeparatedExpression = (expression) => {\n  //   console.log(\"MULTIPLY\");\n  const numbersString = split(expression, \"*\");\n\n  const numbers = numbersString.map((noStr) =>\n    parseDivisionSeparatedExpression(noStr)\n  );\n\n  const initialValue = 1.0;\n  const result = numbers.reduce((acc, no) => acc * no, initialValue);\n  return result;\n};\n\n// ^ / * -\nconst parseMinusSeparatedExpression = (expression) => {\n  //   console.log(\"MINUS\");\n  const numbersString = split(expression, \"-\");\n  // const numbers = numbersString.map(noStr => noStr);\n  const numbers = numbersString.map((noStr) =>\n    parseMultiplicationSeparatedExpression(noStr)\n  );\n  //   console.log(\"MINUS=====numbers\", numbers[0]);\n  const initialValue = numbers[0];\n  const result = numbers.slice(1).reduce((acc, no) => acc - no, initialValue);\n  //   console.log(\"MiNUS result\", result, numbersString);\n  return result;\n};\n\n// ^ / * - +\nconst parsePlusSeparatedExpression = (expression) => {\n  //   console.log(\"PLUS\");\n  const numbersString = split(expression, \"+\");\n\n  // const numbers = numbersString.map(noStr => noStr);\n  const numbers = numbersString.map((noStr) =>\n    parseMinusSeparatedExpression(noStr)\n  );\n  const initialValue = 0.0;\n  const result = numbers.reduce((acc, no) => acc + no, initialValue);\n  //   console.log(\"RESULT=====numbers\", result, numbers);\n  return result;\n};\n\nexport const parseModule = (expression) => {\n  const result = parsePlusSeparatedExpression(expression, \"+\");\n  return result;\n};\n","import React, { useEffect, useRef } from \"react\";\n// import Math from 'mathjs'\n\nfunction Canvas({ isRendering, plotGraph, ...rest }) {\n  //   console.log(\"expression :\", expression);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    function Graph(config) {\n      // user defined properties\n      this.canvas = canvasRef.current;\n      this.minX = config.minX;\n      this.minY = config.minY;\n      this.maxX = config.maxX;\n      this.maxY = config.maxY;\n      this.unitsPerTick = config.unitsPerTick;\n\n      // constants\n      this.axisColor = \"#000000\";\n      this.cellColor = \"#ececec\";\n      this.gCellColor = \"#dbdbdb\";\n      this.font = \"12pt Calibri\";\n      this.tickSize = 10;\n\n      // relationships\n      this.context = this.canvas.getContext(\"2d\");\n      this.rangeX = this.maxX - this.minX;\n      this.rangeY = this.maxY - this.minY;\n      this.unitX = this.canvas.width / this.rangeX;\n      this.unitY = this.canvas.height / this.rangeY;\n      this.centerY = Math.round(\n        Math.abs(this.minY / this.rangeY) * this.canvas.height\n      );\n      this.centerX = Math.round(\n        Math.abs(this.minX / this.rangeX) * this.canvas.width\n      );\n      this.iteration = (this.maxX - this.minX) / 1000;\n      this.scaleX = this.canvas.width / this.rangeX;\n      this.scaleY = this.canvas.height / this.rangeY;\n\n      // draw x and y axis\n      this.drawXAxis();\n      this.drawYAxis();\n      this.drawGrid(this.cellColor);\n      this.drawGrid(this.gCellColor, 5);\n    }\n\n    Graph.prototype.drawXAxis = function () {\n      var context = this.context;\n      context.save();\n      context.beginPath();\n      context.moveTo(0, this.centerY);\n      context.lineTo(this.canvas.width, this.centerY);\n      context.strokeStyle = this.axisColor;\n      context.lineWidth = 2;\n      context.stroke();\n\n      // draw tick marks\n      var xPosIncrement = this.unitsPerTick * this.unitX;\n      var xPos, unit;\n      context.font = this.font;\n      context.textAlign = \"center\";\n      context.textBaseline = \"top\";\n\n      // draw left tick marks\n      xPos = this.centerX - xPosIncrement;\n      unit = -1 * this.unitsPerTick;\n      while (xPos > 0) {\n        context.moveTo(xPos, this.centerY - this.tickSize / 2);\n        context.lineTo(xPos, this.centerY + this.tickSize / 2);\n        context.stroke();\n        context.fillText(unit, xPos, this.centerY + this.tickSize / 2 + 3);\n        unit -= this.unitsPerTick;\n        xPos = Math.round(xPos - xPosIncrement);\n      }\n\n      // draw right tick marks\n      xPos = this.centerX + xPosIncrement;\n      unit = this.unitsPerTick;\n      while (xPos < this.canvas.width) {\n        context.moveTo(xPos, this.centerY - this.tickSize / 2);\n        context.lineTo(xPos, this.centerY + this.tickSize / 2);\n        context.stroke();\n        context.fillText(unit, xPos, this.centerY + this.tickSize / 2 + 3);\n        unit += this.unitsPerTick;\n        xPos = Math.round(xPos + xPosIncrement);\n      }\n      context.restore();\n    };\n\n    Graph.prototype.drawGrid = function (color, gBlk = 1) {\n      let context = this.context;\n      let xGrid = gBlk * 10;\n      let yGrid = gBlk * 10;\n      const cellSize = gBlk * 10;\n      const h = this.canvas.height;\n      const w = this.canvas.width;\n\n      context.beginPath();\n      context.strokeStyle = color;\n\n      while (xGrid < h) {\n        context.moveTo(0, xGrid);\n        context.lineTo(w, xGrid);\n\n        xGrid += cellSize;\n      }\n\n      while (yGrid < w) {\n        context.moveTo(yGrid, 0);\n        context.lineTo(yGrid, h);\n\n        yGrid += cellSize;\n      }\n\n      context.stroke();\n    };\n\n    Graph.prototype.drawYAxis = function () {\n      var context = this.context;\n      context.save();\n      context.beginPath();\n      context.moveTo(this.centerX, 0);\n      context.lineTo(this.centerX, this.canvas.height);\n      context.strokeStyle = this.axisColor;\n      context.lineWidth = 2;\n      context.stroke();\n\n      // draw tick marks\n      var yPosIncrement = this.unitsPerTick * this.unitY;\n      var yPos, unit;\n      context.font = this.font;\n      context.textAlign = \"right\";\n      context.textBaseline = \"middle\";\n\n      // draw top tick marks\n      yPos = this.centerY - yPosIncrement;\n      unit = this.unitsPerTick;\n      while (yPos > 0) {\n        context.moveTo(this.centerX - this.tickSize / 2, yPos);\n        context.lineTo(this.centerX + this.tickSize / 2, yPos);\n        context.stroke();\n        context.fillText(unit, this.centerX - this.tickSize / 2 - 3, yPos);\n        unit += this.unitsPerTick;\n        yPos = Math.round(yPos - yPosIncrement);\n      }\n\n      // draw bottom tick marks\n      yPos = this.centerY + yPosIncrement;\n      unit = -1 * this.unitsPerTick;\n      while (yPos < this.canvas.height) {\n        context.moveTo(this.centerX - this.tickSize / 2, yPos);\n        context.lineTo(this.centerX + this.tickSize / 2, yPos);\n        context.stroke();\n        context.fillText(unit, this.centerX - this.tickSize / 2 - 3, yPos);\n        unit -= this.unitsPerTick;\n        yPos = Math.round(yPos + yPosIncrement);\n      }\n      context.restore();\n    };\n\n    Graph.prototype.drawEquation = function (equation, color, thickness) {\n      var context = this.context;\n      context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      context.save();\n      context.save();\n      this.transformContext();\n\n      context.beginPath();\n      context.moveTo(this.minX, equation(this.minX));\n      //   console.log(\"equation(this.minX) :\", this.minX, equation(this.minX));\n\n      for (\n        var x = this.minX + this.iteration;\n        x <= this.maxX;\n        x += this.iteration\n      ) {\n        // console.log(\"equation(x) :\", x, equation(x));\n        context.lineTo(x, equation(x));\n      }\n\n      context.restore();\n      context.lineJoin = \"round\";\n      context.lineWidth = thickness;\n      context.strokeStyle = color;\n      context.stroke();\n      context.restore();\n    };\n\n    Graph.prototype.transformContext = function () {\n      var context = this.context;\n\n      // move context to center of canvas\n      this.context.translate(this.centerX, this.centerY);\n\n      /*\n       * stretch grid to fit the canvas window, and\n       * invert the y scale so that that increments\n       * as you move upwards\n       */\n      context.scale(this.scaleX, -this.scaleY);\n    };\n\n    const myGraph = new Graph({\n      canvasId: \"myCanvas\",\n      minX: -10,\n      minY: -10,\n      maxX: 10,\n      maxY: 10,\n      unitsPerTick: 1,\n    });\n\n    // myGraph.drawEquation(\n    //   function (x) {\n    //     return x * x;\n    //   },\n    //   \"blue\",\n    //   3\n    // );\n    plotGraph(myGraph);\n\n    // myGraph.drawEquation(\n    //   function (x) {\n    //     return 1 * x;\n    //   },\n    //   \"red\",\n    //   3\n    // );\n  }, [isRendering, plotGraph]);\n\n  return <canvas ref={canvasRef} {...rest} />;\n}\n\nexport default Canvas;\n","import React, { useState } from \"react\";\nimport { MathComponent } from \"mathjax-react\";\nimport { simplify, parse } from \"mathjs\";\nimport { parseModule, transformExpression } from \"./utils\";\nimport \"./styles/App.scss\";\nimport Canvas from \"./components/Canvas\";\n\nfunction App() {\n  const [expression, setExpression] = useState(\"3x^2\");\n  const [parseExpr, setParseExpr] = useState(\"\");\n  const [myGraph, setMyGraph] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [chooseComputation, setChooseComputation] = useState(\"native\");\n\n\n  const wolfram = (x) => {\n    try {\n      const f = parse(expression);\n      const simplified = simplify(f);\n      // console.log(\"x :\", x, simplified.toString());\n      const result = simplified.evaluate({ x });\n\n      return result;\n    } catch (error) {\n      console.log(\"error :\", error);\n    }\n  };\n\n  const nativeParsing = (x) => {\n    const expr = transformExpression(expression, x);\n    const result = parseModule(expr);\n    // console.log(\"expr :\", expr, result, x);\n\n    return result;\n  };\n\n  const handlePlot = (x) => {\n    setParseExpr(expression);\n    setIsLoading(true);\n\n    // setTimeout(() => {\n    myGraph.drawEquation(\n      function (x) {\n        return chooseComputation === \"wolfram\" ? wolfram(x) : nativeParsing(x);\n      },\n      \"green\",\n      3\n    );\n\n    // console.log(\"isLoading :\", isLoading);\n    setIsLoading(false);\n    // }, 1000);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"app-switch\">\n          <label\n            htmlFor=\"native\"\n            className={`switch-label ${\n              chooseComputation === \"native\" ? \"active\" : \"\"\n            }`}\n          >\n            <input\n              type=\"radio\"\n              name=\"switch\"\n              value=\"native\"\n              id=\"native\"\n              onChange={(e) => setChooseComputation(e.target.value)}\n            />\n            Native\n          </label>\n          <label\n            htmlFor=\"wolfram\"\n            className={`switch-label ${\n              chooseComputation === \"wolfram\" ? \"active\" : \"\"\n            }`}\n          >\n            <input\n              type=\"radio\"\n              name=\"switch\"\n              value=\"wolfram\"\n              id=\"wolfram\"\n              onChange={(e) => setChooseComputation(e.target.value)}\n            />\n            Wolfram\n          </label>\n        </div>\n        <div className=\"input-container\">\n          <div className=\"form-input-group\">\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Enter a mathematical expression\"\n              onChange={(e) => setExpression(e.target.value)}\n            />\n            <button onClick={handlePlot} className=\"plot-btn\">\n              Plot graph\n            </button>\n          </div>\n        </div>\n        <div className=\"content-container\">\n          <div className=\"input-expression\">\n            {parseExpr && (\n              <>\n                Input: <MathComponent tex={String.raw`${parseExpr}`} />\n              </>\n            )}\n          </div>\n          {isLoading ? (\n            <div>rendering graph...</div>\n          ) : (\n            <Canvas\n              width=\"1000\"\n              height=\"1000\"\n              plotGraph={setMyGraph}\n              isRendering={parseExpr}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}